using System;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using System.IO;
using System.Text.RegularExpressions;

namespace Gen_1PokemonCaptureSimulation
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        //private string filePath = @"C:\Users\jay_d\Documents\GitHub\Visual Studio\Projects\Gen 1PokemonCaptureSimulation\Gen 1PokemonCaptureSimulation\Resources\Pokemon Sprites\";
        private string filePath = Path.Combine(Directory.GetParent(Directory.GetParent(Directory.GetParent(AppDomain.CurrentDomain.BaseDirectory).FullName).FullName).FullName, "Resources", "Pokemon Sprites" + Path.DirectorySeparatorChar);

        Random rnd = new Random();
        bool hintShown = false, goodToGo = false;
        int MegaStone, PB, GB, UB, SB, MB;
        float money, N, M, f, d, b, H, h, r, x, s, statVal, ballShakes, currentBallShakes;
        Bitmap normalBall, rightBall, leftBall, caughtBall;
        String[] balls = { "PokeBall", "Master Ball", "Great Ball", "Ultra Ball", "Safari Ball" };
        String[] megaNames = { "ABOMASNOW-MEGA", "ABSOL-MEGA", "AERODACTYL-MEGA", "AGGRON-MEGA", "ALAKAZAM-MEGA", "ALTARIA-MEGA", "AMPHAROS-MEGA", "AUDINO-MEGA", "BANETTE-MEGA", "BEEDRILL-MEGA", "BLASTOISE-MEGA", "BLAZIKEN-MEGA", "CAMERUPT-MEGA", "CHARIZARD-MEGA", "DIANCIE-MEGA", "GALLADE-MEGA", "GARCHOMP-MEGA", "GARDEVOIR-MEGA", "GENGAR-MEGA", "GLALIE-MEGA", "GYARADOS-MEGA", "HERACROSS-MEGA", "HOUNDOOM-MEGA", "KANGASKHAN-MEGA", "LATIAS-MEGA", "LATIOS-MEGA", "LOPUNNY-MEGA", "LUCARIO-MEGA", "MANECTRIC-MEGA", "MAWILE-MEGA", "MEDICHAM-MEGA", "METAGROSS-MEGA", "MEWTWO-MEGA", "PIDGEOT-MEGA", "PINSIR-MEGA", "RAYQUAZA-MEGA", "SABLEYE-MEGA", "SALAMENCE-MEGA", "SCEPTILE-MEGA", "SCIZOR-MEGA", "SHARPEDO-MEGA", "SLOWBRO-MEGA", "STEELIX-MEGA", "SWAMPERT-MEGA", "TYRANITAR-MEGA", "VENUSAUR-MEGA" };
        String[] megas = { "ABOMASNOW", "ABSOL", "AERODACTYL", "AGGRON", "ALAKAZAM", "ALTARIA", "AMPHAROS", "AUDINO", "BANETTE", "BEEDRILL", "BLASTOISE", "BLAZIKEN", "CAMERUPT", "CHARIZARD", "DIANCIE", "GALLADE", "GARCHOMP", "GARDEVOIR", "GENGAR", "GLALIE", "GYARADOS", "HERACROSS", "HOUNDOOM", "KANGASKHAN", "LATIAS", "LATIOS", "LOPUNNY", "LUCARIO", "MANECTRIC", "MAWILE", "MEDICHAM", "METAGROSS", "MEWTWO", "PIDGEOT", "PINSIR", "RAYQUAZA", "SABLEYE", "SALAMENCE", "SCEPTILE", "SCIZOR", "SHARPEDO", "SLOWBRO", "STEELIX", "SWAMPERT", "TYRANITAR", "VENUSAUR" };
        String[] pokemon = { "ABOMASNOW", "ABRA", "ABSOL", "ACCELGOR", "AEGISLASH", "AERODACTYL", "AGGRON", "AIPOM", "ALAKAZAM", "ALOMOMOLA", "ALTARIA", "AMAURA", "AMBIPOM", "AMOONGUSS", "AMPHAROS", "ANORITH", "ARAQUANID", "ARBOK", "ARCANINE", "ARCEUS", "ARCHEN", "ARCHEOPS", "ARIADOS", "ARMALDO", "AROMATISSE", "ARON", "ARTICUNO", "AUDINO", "AURORUS", "AVALUGG", "AXEW", "AZELF", "AZUMARILL", "AZURILL", "BAGON", "BALTOY", "BANETTE", "BARBARACLE", "BARBOACH", "BASCULIN", "BASTIODON", "BAYLEEF", "BEARTIC", "BEAUTIFLY", "BEEDRILL", "BEHEEYEM", "BELDUM", "BELLOSSOM", "BELLSPROUT", "BERGMITE", "BEWEAR", "BIBAREL", "BIDOOF", "BINACLE", "BISHARP", "BLASTOISE", "BLAZIKEN", "BLISSEY", "BLITZLE", "BOLDORE", "BONSLY", "BOUFFALANT", "BOUNSWEET", "BRAIXEN", "BRAVIARY", "BRELOOM", "BRIONNE", "BRONZONG", "BRONZOR", "BRUXISH", "BUDEW", "BUIZEL", "BULBASAUR", "BUNEARY", "BUNNELBY", "BURMY", "BUTTERFREE", "BUZZWOLE", "CACNEA", "CACTURNE", "CAMERUPT", "CARBINK", "CARNIVINE", "CARRACOSTA", "CARVANHA", "CASCOON", "CASTFORM", "CATERPIE", "CELEBI", "CELESTEELA", "CHANDELURE", "CHANSEY", "CHARIZARD", "CHARJABUG", "CHARMANDER", "CHARMELEON", "CHATOT", "CHERRIM", "CHERUBI", "CHESNAUGHT", "CHESPIN", "CHIKORITA", "CHIMCHAR", "CHIMECHO", "CHINCHOU", "CHINGLING", "CINCCINO", "CLAMPERL", "CLAUNCHER", "CLAWITZER", "CLAYDOL", "CLEFABLE", "CLEFAIRY", "CLEFFA", "CLOYSTER", "COBALION", "COFAGRIGUS", "COMBEE", "COMBUSKEN", "COMFEY", "CONKELDURR", "CORPHISH", "CORSOLA", "COSMOEM", "COSMOG", "COTTONEE", "CRABOMINABLE", "CRABRAWLER", "CRADILY", "CRANIDOS", "CRAWDAUNT", "CRESSELIA", "CROAGUNK", "CROBAT", "CROCONAW", "CRUSTLE", "CRYOGONAL", "CUBCHOO", "CUBONE", "CUTIEFLY", "CYNDAQUIL", "DARKRAI", "DARMANITAN", "DARTRIX", "DARUMAKA", "DECIDUEYE", "DEDENNE", "DEERLING", "DEINO", "DELCATTY", "DELIBIRD", "DELPHOX", "DEOXYS", "DEWGONG", "DEWOTT", "DEWPIDER", "DHELMISE", "DIALGA", "DIANCIE", "DIGGERSBY", "DIGLETT", "DIGLETT-ALOLA", "DITTO", "DODRIO", "DODUO", "DONPHAN", "DOUBLADE", "DRAGALGE", "DRAGONAIR", "DRAGONITE", "DRAMPA", "DRAPION", "DRATINI", "DRIFBLIM", "DRIFLOON", "DRILBUR", "DROWZEE", "DRUDDIGON", "DUCKLETT", "DUGTRIO", "DUGTRIO-ALOLA", "DUNSPARCE", "DUOSION", "DURANT", "DUSCLOPS", "DUSKNOIR", "DUSKULL", "DUSTOX", "DWEBBLE", "EELEKTRIK", "EELEKTROSS", "EEVEE", "EKANS", "ELECTABUZZ", "ELECTIVIRE", "ELECTRIKE", "ELECTRODE", "ELEKID", "ELGYEM", "EMBOAR", "EMOLGA", "EMPOLEON", "ENTEI", "ESCAVALIER", "ESPEON", "ESPURR", "EXCADRILL", "EXEGGCUTE", "EXEGGUTOR", "EXEGGUTOR-ALOLA", "EXPLOUD", "FARFETCH'D", "FEAROW", "FEEBAS", "FENNEKIN", "FERALIGATR", "FERROSEED", "FERROTHORN", "FINNEON", "FLAAFFY", "FLABÉBÉ", "FLAREON", "FLETCHINDER", "FLETCHLING", "FLOATZEL", "FLOETTE", "FLORGES", "FLYGON", "FOMANTIS", "FOONGUS", "FORRETRESS", "FRAXURE", "FRILLISH", "FROAKIE", "FROGADIER", "FROSLASS", "FURFROU", "FURRET", "GABITE", "GALLADE", "GALVANTULA", "GARBODOR", "GARCHOMP", "GARDEVOIR", "GASTLY", "GASTRODON", "GASTRODON-EAST", "GENESECT", "GENGAR", "GEODUDE", "GEODUDE-ALOLA", "GIBLE", "GIGALITH", "GIRAFARIG", "GIRATINA", "GLACEON", "GLALIE", "GLAMEOW", "GLIGAR", "GLISCOR", "GLOOM", "GOGOAT", "GOLBAT", "GOLDEEN", "GOLDUCK", "GOLEM", "GOLEM-ALOLA", "GOLETT", "GOLISOPOD", "GOLURK", "GOODRA", "GOOMY", "GOREBYSS", "GOTHITA", "GOTHITELLE", "GOTHORITA", "GOURGEIST", "GRANBULL", "GRAVELER", "GRAVELER-ALOLA", "GRENINJA", "GRIMER", "GRIMER-ALOLA", "GROTLE", "GROUDON", "GROVYLE", "GROWLITHE", "GRUBBIN", "GRUMPIG", "GULPIN", "GUMSHOOS", "GURDURR", "GUZZLORD", "GYARADOS", "HAKAMO-O", "HAPPINY", "HARIYAMA", "HAUNTER", "HAWLUCHA", "HAXORUS", "HEATMOR", "HEATRAN", "HELIOLISK", "HELIOPTILE", "HERACROSS", "HERDIER", "HIPPOPOTAS", "HIPPOWDON", "HITMONCHAN", "HITMONLEE", "HITMONTOP", "HO-OH", "HONCHKROW", "HONEDGE", "HOOPA", "HOOTHOOT", "HOPPIP", "HORSEA", "HOUNDOOM", "HOUNDOUR", "HUNTAIL", "HYDREIGON", "HYPNO", "IGGLYBUFF", "ILLUMISE", "INCINEROAR", "INFERNAPE", "INKAY", "IVYSAUR", "JANGMO-O", "JELLICENT", "JIGGLYPUFF", "JIRACHI", "JOLTEON", "JOLTIK", "JUMPLUFF", "JYNX", "KABUTO", "KABUTOPS", "KADABRA", "KAKUNA", "KANGASKHAN", "KARRABLAST", "KARTANA", "KECLEON", "KELDEO", "KINGDRA", "KINGLER", "KIRLIA", "KLANG", "KLEFKI", "KLINK", "KLINKLANG", "KOFFING", "KOMMO-O", "KRABBY", "KRICKETOT", "KRICKETUNE", "KROKOROK", "KROOKODILE", "KYOGRE", "KYUREM", "LAIRON", "LAMPENT", "LANDORUS", "LANTURN", "LAPRAS", "LARVESTA", "LARVITAR", "LATIAS", "LATIOS", "LEAFEON", "LEAVANNY", "LEDIAN", "LEDYBA", "LICKILICKY", "LICKITUNG", "LIEPARD", "LILEEP", "LILLIGANT", "LILLIPUP", "LINOONE", "LITLEO", "LITTEN", "LITWICK", "LOMBRE", "LOPUNNY", "LOTAD", "LOUDRED", "LUCARIO", "LUDICOLO", "LUGIA", "LUMINEON", "LUNALA", "LUNATONE", "LURANTIS", "LUVDISC", "LUXIO", "LUXRAY", "LYCANROC", "LYCANROC-MIDNIGHT", "MACHAMP", "MACHOKE", "MACHOP", "MAGBY", "MAGCARGO", "MAGEARNA", "MAGEARNA-POKEBALL", "MAGIKARP", "MAGMAR", "MAGMORTAR", "MAGNEMITE", "MAGNETON", "MAGNEZONE", "MAKUHITA", "MALAMAR", "MAMOSWINE", "MANAPHY", "MANDIBUZZ", "MANECTRIC", "MANKEY", "MANTINE", "MANTYKE", "MARACTUS", "MAREANIE", "MAREEP", "MARILL", "MAROWAK", "MAROWAK-ALOLA", "MARSHADOW", "MARSHTOMP", "MASQUERAIN", "MAWILE", "MEDICHAM", "MEDITITE", "MEGANIUM", "MELOETTA", "MEOWSTIC", "MEOWTH", "MEOWTH-ALOLA", "MESPRIT", "METAGROSS", "METANG", "METAPOD", "MEW", "MEWTWO", "MIENFOO", "MIENSHAO", "MIGHTYENA", "MILOTIC", "MILTANK", "MIME JR.", "MIMIKYU", "MINCCINO", "MINIOR", "MINUN", "MISDREAVUS", "MISMAGIUS", "MOLTRES", "MONFERNO", "MORELULL", "MOTHIM", "MR. MIME", "MUDBRAY", "MUDKIP", "MUDSDALE", "MUK", "MUK-ALOLA", "MUNCHLAX", "MUNNA", "MURKROW", "MUSHARNA", "NATU", "NECROZMA", "NIDOKING", "NIDOQUEEN", "NIDORAN♀", "NIDORAN♂", "NIDORINA", "NIDORINO", "NIHILEGO", "NINCADA", "NINETALES", "NINETALES-ALOLA", "NINJASK", "NOCTOWL", "NOIBAT", "NOIVERN", "NOSEPASS", "NUMEL", "NUZLEAF", "OCTILLERY", "ODDISH", "OMANYTE", "OMASTAR", "ONIX", "ORANGURU", "ORICORIO", "ORICORIO-PAU", "ORICORIO-POMPOM", "ORICORIO-SENSU", "OSHAWOTT", "PACHIRISU", "PALKIA", "PALOSSAND", "PALPITOAD", "PANCHAM", "PANGORO", "PANPOUR", "PANSAGE", "PANSEAR", "PARAS", "PARASECT", "PASSIMIAN", "PATRAT", "PAWNIARD", "PELIPPER", "PERSIAN", "PERSIAN-ALOLA", "PETILIL", "PHANPY", "PHANTUMP", "PHEROMOSA", "PHIONE", "PICHU", "PIDGEOT", "PIDGEOTTO", "PIDGEY", "PIDOVE", "PIGNITE", "PIKACHU", "PIKIPEK", "PILOSWINE", "PINECO", "PINSIR", "PIPLUP", "PLUSLE", "POLITOED", "POLIWAG", "POLIWHIRL", "POLIWRATH", "PONYTA", "POOCHYENA", "POPPLIO", "PORYGON", "PORYGON-Z", "PORYGON2", "PRIMARINA", "PRIMEAPE", "PRINPLUP", "PROBOPASS", "PSYDUCK", "PUMPKABOO", "PUPITAR", "PURRLOIN", "PURUGLY", "PYROAR", "PYUKUMUKU", "QUAGSIRE", "QUILAVA", "QUILLADIN", "QWILFISH", "RAICHU", "RAICHU-ALOLA", "RAIKOU", "RALTS", "RAMPARDOS", "RAPIDASH", "RATICATE", "RATICATE-ALOLA", "RATTATA", "RATTATA-ALOLA", "RAYQUAZA", "REGICE", "REGIGIGAS", "REGIROCK", "REGISTEEL", "RELICANTH", "REMORAID", "RESHIRAM", "REUNICLUS", "RHYDON", "RHYHORN", "RHYPERIOR", "RIBOMBEE", "RIOLU", "ROCKRUFF", "ROGGENROLA", "ROSELIA", "ROSERADE", "ROTOM", "ROTOM-FAN", "ROTOM-FROST", "ROTOM-HEAT", "ROTOM-MOW", "ROTOM-WASH", "ROWLET", "RUFFLET", "SABLEYE", "SALAMENCE", "SALANDIT", "SALAZZLE", "SAMUROTT", "SANDILE", "SANDSHREW", "SANDSHREW-ALOLA", "SANDSLASH", "SANDSLASH-ALOLA", "SAWK", "SAWSBUCK", "SCATTERBUG", "SCEPTILE", "SCIZOR", "SCOLIPEDE", "SCRAFTY", "SCRAGGY", "SCYTHER", "SEADRA", "SEAKING", "SEALEO", "SEEDOT", "SEEL", "SEISMITOAD", "SENTRET", "SERPERIOR", "SERVINE", "SEVIPER", "SEWADDLE", "SHARPEDO", "SHAYMIN", "SHAYMIN-SKY", "SHEDINJA", "SHELGON", "SHELLDER", "SHELLOS", "SHELLOS-WEST", "SHELMET", "SHIELDON", "SHIFTRY", "SHIINOTIC", "SHINX", "SHROOMISH", "SHUCKLE", "SHUPPET", "SIGILYPH", "SILCOON", "SILVALLY", "SIMIPOUR", "SIMISAGE", "SIMISEAR", "SKARMORY", "SKIDDO", "SKIPLOOM", "SKITTY", "SKORUPI", "SKRELP", "SKUNTANK", "SLAKING", "SLAKOTH", "SLIGGOO", "SLOWBRO", "SLOWKING", "SLOWPOKE", "SLUGMA", "SLURPUFF", "SMEARGLE", "SMOOCHUM", "SNEASEL", "SNIVY", "SNORLAX", "SNORUNT", "SNOVER", "SNUBBULL", "SOLGALEO", "SOLOSIS", "SOLROCK", "SPEAROW", "SPEWPA", "SPHEAL", "SPINARAK", "SPINDA", "SPIRITOMB", "SPOINK", "SPRITZEE", "SQUIRTLE", "STANTLER", "STARAPTOR", "STARAVIA", "STARLY", "STARMIE", "STARYU", "STEELIX", "STEENEE", "STOUTLAND", "STUFFUL", "STUNFISK", "STUNKY", "SUDOWOODO", "SUICUNE", "SUNFLORA", "SUNKERN", "SURSKIT", "SWABLU", "SWADLOON", "SWALOT", "SWAMPERT", "SWANNA", "SWELLOW", "SWINUB", "SWIRLIX", "SWOOBAT", "SYLVEON", "TAILLOW", "TALONFLAME", "TANGELA", "TANGROWTH", "TAPUBULU", "TAPUFINI", "TAPUKOKO", "TAPULELE", "TAUROS", "TEDDIURSA", "TENTACOOL", "TENTACRUEL", "TEPIG", "TERRAKION", "THROH", "THUNDURUS", "TIMBURR", "TIRTOUGA", "TOGEDEMARU", "TOGEKISS", "TOGEPI", "TOGETIC", "TORCHIC", "TORKOAL", "TORNADUS", "TORRACAT", "TORTERRA", "TOTODILE", "TOUCANNON", "TOXAPEX", "TOXICROAK", "TRANQUILL", "TRAPINCH", "TREECKO", "TREVENANT", "TROPIUS", "TRUBBISH", "TRUMBEAK", "TSAREENA", "TURTONATOR", "TURTWIG", "TYMPOLE", "TYNAMO", "TYPENULL", "TYPHLOSION", "TYRANITAR", "TYRANTRUM", "TYROGUE", "TYRUNT", "UMBREON", "UNFEZANT", "UNOWN", "URSARING", "UXIE", "VANILLISH", "VANILLITE", "VANILLUXE", "VAPOREON", "VENIPEDE", "VENOMOTH", "VENONAT", "VENUSAUR", "VESPIQUEN", "VIBRAVA", "VICTINI", "VICTREEBEL", "VIGOROTH", "VIKAVOLT", "VILEPLUME", "VIRIZION", "VIVILLON", "VOLBEAT", "VOLCANION", "VOLCARONA", "VOLTORB", "VULLABY", "VULPIX", "VULPIX-ALOLA", "WAILMER", "WAILORD", "WALREIN", "WARTORTLE", "WATCHOG", "WEAVILE", "WEEDLE", "WEEPINBELL", "WEEZING", "WHIMSICOTT", "WHIRLIPEDE", "WHISCASH", "WHISMUR", "WIGGLYTUFF", "WIMPOD", "WINGULL", "WISHIWASHI", "WISHIWASHI-SCHOOL", "WOBBUFFET", "WOOBAT", "WOOPER", "WORMADAM", "WURMPLE", "WYNAUT", "XATU", "XERNEAS", "XURKITREE", "YAMASK", "YANMA", "YANMEGA", "YUNGOOS", "YVELTAL", "ZANGOOSE", "ZAPDOS", "ZEBSTRIKA", "ZEKROM", "ZIGZAGOON", "ZOROARK", "ZORUA", "ZUBAT", "ZWEILOUS", "ZYGARDE", "ZYGARDE-10", "ZYGARDE-COMPLETE" };

        //CATCH RATES
        String[] catchRate3 = { "MAGEARNA-POKEBALL", "ZYGARDE-10", "ZYGARDE-COMPLETE", "MARSHADOW", "MAGEARNA", "TAPUFINI", "TAPUBULU", "TAPULELE", "TAPUKOKO", "SILVALLY", "TYPENULL", "ARCEUS", "ARTICUNO", "AZELF", "BELDUM", "COBALIO", "COBALION", "CRESSELIA", "DARKRAI", "DEOXYS", "DEOXYS-NORMAL", "DEOXYS-ATTACK", "DEOXYS-DEFENSE", "DEOXYS-SPEED", "DIALGA", "DIANCIE", "ENTEI", "GENESECT", "GIRATINA", "GIRATINA-ALTERED", "GIRATINA-ORIGIN", "GROUDON", "HEATRAN", "HO-OH", "HOOPA", "HOOPA-CONFINED", "HOOPA-UNBOUND", "JIRACHI", "KELDEO", "KYOGRE", "KYUREM", "LANDORUS", "LATIAS", "LATIOS", "LUGIA", "MANAPHY", "MELOETTA", "MELOETTA-ARIA", "MELOETTA-PIROUETTE", "MESPRIT", "METAGROSS", "METANG", "MEWTWO", "MOLTRES", "PALKIA", "RAIKOU", "REGICE", "REGIGIGAS", "REGIROCK", "REGISTEEL", "RESHIRAM", "SUICUNE", "TERRAKION", "THUNDURUS", "TORNADUS", "UXIE", "VICTINI", "VIRIZION", "VOLCANION", "ZAPDOS", "ZEKROM", "ZYGARDE" };
        String[] catchRate25 = { "DHELMISE", "BASCULIN", "BASCULIN-RED STRIPED FORM", "BASCULIN-BLUE STRIPED FORM", "CLEFABLE", "CRYOGONAL", "MANTINE", "MANTYKE", "RELICANTH", "SCIZOR", "SKARMORY", "SNORLAX", "STEELIX" };
        String[] catchRate30 = { "MINIOR", "PASSIMIAN", "ORANGURU", "ABSOL", "BLISSEY", "CHANSEY", "CHATOT", "EELEKTROSS", "ELECTIVIRE", "GLISCOR", "HONCHKROW", "KLINKLANG", "LICKILICKY", "MAGMORTAR", "MAGNEZONE", "MURKROW", "PHIONE", "PORYGON-Z", "RHYPERIOR", "TANGROWTH", "TOGEKISS", "YANMEGA" };
        String[] catchRate45 = { "EXEGGUTOR-ALOLA", "GOLEM-ALOLA", "NAGANADEL", "POIPOLE", "NIHILEGO", "BUZZWOLE", "PHEROMOSA", "XURKITREE", "CELESTEELA", "KARTANA", "GUZZLORD", "LUNALA", "SOLGALEO", "COSMOEM", "COSMOG", "KOMMO-O", "HAKAMO-O", "JANGMO-O", "MIMIKYU", "KOMALA", "GOLISOPOD", "TSAREENA", "SALAZZLE", "ORICORIO", "ORICORIO-POMPOM", "ORICORIO-PAU", "ORICORIO-SENSU", "VIKAVOLT", "TOUCANNON", "PRIMARINA", "BRIONNE", "POPPLIO", "INCINEROAR", "TORRACAT", "LITTEN", "DECIDUEYE", "DARTRIX", "ROWLET", "SOLGALEO", "AEGISLASH", "AERODACTYL", "AGGRON", "AIPOM", "ALTARIA", "AMAURA", "AMBIPOM", "AMPHAROS", "ANORITH", "ARCHEN", "ARCHEOPS", "ARMALDO", "AURORUS", "BAGON", "BANETTE", "BARBARACLE", "BASTIODON", "BAYLEEF", "BEAUTIFLY", "BEEDRILL", "BELLOSSOM", "BISHARP", "BLASTOISE", "BLAZIKEN", "BOUFFALANT", "BRAIXEN", "BULBASAUR", "BUTTERFREE", "CARRACOSTA", "CASTFORM", "CASTFORM-WATER", "CASTFORM-FIRE", "CASTFORM-ICE", "CASTFORM-NORMAL", "CELEBI", "CHANDELURE", "CHARIZARD", "CHARMANDER", "CHARMELEON", "CHESNAUGHT", "CHESPIN", "CHIKORITA", "CHIMCHAR", "CHIMECHO", "COMBUSKEN", "CONKELDURR", "CRADILY", "CRANIDOS", "CROCONAW", "CYNDAQUIL", "DEINO", "DELIBIRD", "DELPHOX", "DEWOTT", "DODRIO", "DRAGONAIR", "DRAGONITE", "DRAPION", "DRATINI", "DRUDDIGON", "DUSKNOIR", "DUSTOX", "EEVEE", "ELECTABUZZ", "ELEKID", "EMBOAR", "EMPOLEON", "ESPEON", "EXEGGUTOR", "EXPLOUD", "FARFETCH'D", "FARFETCHD", "FENNEKIN", "FERALIGATR", "FLAREON", "FLORGES", "FLYGON", "FROAKIE", "FROGADIER", "GABITE", "GALLADE", "GARCHOMP", "GARDEVOIR", "GENGAR", "GIBLE", "GIGALITH", "GLACEON", "GOGOAT", "GOLEM", "GOODRA", "GOOMY", "GRENINJA", "GROTLE", "GROVYLE", "GYARADOS", "HAXORUS", "HERACROSS", "HITMONCHAN", "HITMONLEE", "HITMONTOP", "HOUNDOOM", "HYDREIGON", "INFERNAPE", "IVYSAUR", "JOLTEON", "JUMPLUFF", "JYNX", "KABUTO", "KABUTOPS", "KANGASKHAN", "KINGDRA", "KRICKETUNE", "KROOKODILE", "LAPRAS", "LARVESTA", "LARVITAR", "LEAFEON", "LEAVANNY", "LICKITUNG", "LILEEP", "LUCARIO", "LUDICOLO", "LUNATONE", "LUXRAY", "MACHAMP", "MAGBY", "MAGMAR", "MANECTRIC", "MARSHTOMP", "MAWILE", "MEGANIUM", "MEW", "MIENSHAO", "MILTANK", "MISDREAVUS", "MISMAGIUS", "MISTERMIME", "MISTER MIME", "MONFERNO", "MOTHIM", "MR. MIME", "MR MIME", "MRMIME", "MUDKIP", "NIDOKING", "NIDOQUEEN", "NOIVERN", "OMANYTE", "OMASTAR", "ONIX", "OSHAWOTT", "PELIPPER", "PIDGEOT", "PIGNITE", "PINSIR", "PIPLUP", "POLITOED", "POLIWRATH", "PORYGON", "PRINPLUP", "PUPITAR", "QUILAVA", "QUILLADIN", "QWILFISH", "RAMPARDOS", "RAYQUAZA", "ROTOM", "ROTOM-HEAT", "ROTOM-WASH", "ROTOM-FROST", "ROTOM-FAN", "ROTOM-MOW", "SABLEYE", "SALAMENCE", "SAMUROTT", "SAWK", "SCEPTILE", "SCOLIPEDE", "SCYTHER", "SEISMITOAD", "SERPERIOR", "SERVINE", "SHAYMIN", "SHAYMIN-LAND", "SHAYMIN-SKY", "SHEDINJA", "SHELGON", "SHIELDON", "SHIFTRY", "SIGILYPH", "SLAKING", "SLIGGOO", "SMEARGLE", "SMOOCHUM", "SNIVY", "SOLROCK", "SQUIRTLE", "STANTLER", "STARAPTOR", "STOUTLAND", "SWAMPERT", "SWANNA", "SWELLOW", "SWOOBAT", "SYLVEON", "TALONFLAME", "TANGELA", "TAUROS", "TEPIG", "THROH", "TIRTOUGA", "TORCHIC", "TORTERRA", "TOTODILE", "TREECKO", "TURTWIG", "TYPHLOSION", "TYRANITAR", "TYRANTRUM", "TYRUNT", "UMBREON", "UNFEZANT", "UNFEZANT-MALE", "UNFEZANT-FEMALE", "VANILLUXE", "VAPOREON", "VENUSAUR", "VESPIQUEN", "VICTREEBEL", "VILEPLUME", "VIVILLON", "WALREIN", "WARTORTLE", "WEAVIL", "WEAVILE", "WOBBUFFET", "WORMADAM", "WORMADAM-PLANT", "WORMADAM-SANDY", "WORMADAM-TRASH", "XERNEAS", "YVELTAL", "ZOROARK", "ZWEILOUS" };
        String[] catchRate50 = { "DUGTRIO-ALOLA", "ALAKAZAM", "DUGTRIO", "GOTHITELLE", "MAMOSWINE", "MUNCHLAX", "REUNICLUS", "WIGGLYTUFF" };
        String[] catchRate55 = { "DRAGALGE", "CLAWITZER", "AVALUGG" };
        String[] catchRate60 = { "PYUKUMUKU", "PALOSSAND", "COMFEY", "MUDSDALE", "WISHIWASHI", "WISHIWASHI-SCHOOL", "CRABOMINABLE", "TENTACRUEL", "RAPIDASH", "MAGNETON", "CLOYSTER", "KINGLER", "ELECTRODE", "WEEZING", "RHYDON", "SEAKING", "STARMIE", "GIRAFARIG", "GLIGAR", "SNEASEL", "URSARING", "CORSOLA", "DONPHAN", "DELCATTY", "SHARPEDO", "WAILORD", "GRUMPIG", "CACTURNE", "MILOTIC", "HUNTAIL", "GOREBYSS", "DRIFBLIM", "LOPUNNY", "SKUNTANK", "HIPPOWDON", "ABOMASNOW", "PROBOPASS", "EXCADRILL", "DARMANITAN", "DARMANITAN-ZEN", "GARBODOR", "CINCCINO", "JELLICENT", "JELLICENT-MALE", "JELLICENT-FEMALE", "KLANG", "EELEKTRIK", "FRAXURE", "BEARTIC", "BRAVIARY", "MANDIBUZZ", "CARBINK", "TREVENANT", "GOURGEIST" };
        String[] catchRate65 = { "DRAMPA", "TURTONATOR", "BEWEAR", "PANGORO", "PYROAR", "SUDOWOODO" };
        String[] catchRate75 = { "NINETALES-ALOLA", "MAROWAK-ALOLA", "MUK-ALOLA", "RAICHU-ALOLA", "BRUXISH", "SHIINOTIC", "LURANTIS", "TOXAPEX", "RIBOMBEE", "ACCELGOR", "ALOMOMOLA", "AMOONGUSS", "ARCANINE", "AXEW", "AZUMARILL", "CHERRIM", "CRUSTLE", "DEWGONG", "ESCAVALIER", "FLOATZEL", "FORRETRESS", "FROSLASS", "GALVANTULA", "GASTRODON", "GASTRODON-WEST", "GASTRODON-EAST", "GLALIE", "GOLDUCK", "GRANBULL", "HELIOLISK", "HYPNO", "KLEFKI", "LANTURN", "LILLIGANT", "LUMINEON", "MAGCARGO", "MAROWAK", "MASQUERAIN", "MEOWSTIC", "MUK", "MUSHARNA", "NINETALES", "OCTILLERY", "PARASECT", "PILOSWINE", "PRIMEAPE", "PURUGLY", "RAICHU", "RIOL", "ROSERADE", "SAWSBUCK", "SEADRA", "SIMIPOUR", "SIMISAGE", "SIMISEAR", "SLOWBRO", "STUNFISK", "SWALOT", "TOGETIC", "TOXICROAK", "TYROGUE", "URIOLU", "VENOMOTH", "WHIMSICOTT", "WHISCASH", "XATU", "YANMA", "ZEBSTRIKA", "ZORUA" };
        String[] catchRate90 = { "PERSIAN-ALOLA", "SANDSLASH-ALOLA", "WIMPOD", "LYCANROC", "LYCANROC-MIDNIGHT", "ARBOK", "ARIADOS", "BEHEEYEM", "BRELOOM", "BRONZONG", "CLAYDOL", "COFAGRIGUS", "CROBAT", "DOUBLADE", "DURANT", "DUSCLOPS", "EXEGGCUTE", "FEAROW", "FERROTHORN", "FURRET", "GOLBAT", "GOLURK", "GURDURR", "HAUNTER", "HEATMOR", "KROKOROK", "LAIRON", "LAMPENT", "LEDIAN", "LIEPARD", "LINOONE", "MACHOKE", "MEDICHAM", "NOCTOWL", "PERSIAN", "QUAGSIRE", "SANDSLASH", "SCRAFTY", "SEVIPER", "TORKOAL", "ZANGOOSE" };
        String[] catchRate100 = { "ARAQUANID", "DUOSION", "GOTHORITA", "HAWLUCHA", "KADABRA", "SPIRITOMB" };
        String[] catchRate120 = { "GRAVELER-ALOLA", "STEENEE", "SALANDIT", "CHARJABUG", "TRUMBEAK", "BINACLE", "BOLDORE", "BURMY", "BURMY-PLANT", "BURMY-SANDY", "BURMY-TRASH", "CASCOON", "CHINGLING", "COMBEE", "CUBCHOO", "DARUMAKA", "DRILBUR", "ELECTRIKE", "FLAAFFY", "FLETCHINDER", "FLOETTE", "GLOOM", "GRAVELER", "HERDIER", "HOUNDOUR", "KAKUNA", "KIRLIA", "LOMBRE", "LOUDRED", "LUXIO", "METAPOD", "NIDORINA", "NIDORINO", "NINJASK", "NUZLEAF", "PALPITOAD", "PAWNIARD", "PHANPY", "PHANTUMP", "PIDGEOTTO", "POLIWHIRL", "PUMPKABOO", "RHYHORN", "SEALEO", "SILCOON", "SKIPLOOM", "SKORUPI", "SNOVER", "SPEWPA", "STARAVIA", "SUNFLORA", "SWADLOON", "TEDDIURSA", "TRANQUILL", "VANILLISH", "VIBRAVA", "VIGOROTH", "WEEPINBELL", "WHIRLIPEDE" };
        String[] catchRate125 = { "WAILMER", "WYNAUT", "DRIFLOON" };
        String[] catchRate127 = { "RATICATE-ALOLA", "GUMSHOOS", "BIBAREL", "DIGGERSBY", "MIGHTYENA", "RATICATE" };
        String[] catchRate130 = { "HAPPINY", "KLINK" };
        String[] catchRate140 = { "SANDYGAST", "STUFFUL", "CROAGUNK", "AROMATISSE", "SLURPUFF", "HIPPOPOTAS" };
        String[] catchRate150 = { "AZURILL", "CAMERUPT", "CLEFAIRY", "CLEFFA", "ILLUMISE", "ROSELIA", "VOLBEAT" };
        String[] catchRate170 = { "IGGLYBUFF", "JIGGLYPUFF" };
        String[] catchRate180 = { "TOGEDEMAR", "ARON", "DEDENNE", "HONEDGE", "MACHOP", "MAKUHITA", "MEDITITE", "MIENFOO", "SANDILE", "SCRAGGY", "TIMBURR" };
        String[] catchRate190 = { "MAREANIE", "VULPIX-ALOLA", "GRIMER-ALOLA", "MORELULL", "FOMANTIS", "MUDBRAY", "MARENIE", "ROCKRUFF", "CUTIEFLY", "BARBOACH", "BERGMITE", "BLITZLE", "BUIZEL", "BUNEARY", "CACNEA", "CHERUBI", "CHINCHOU", "COTTONEE", "CUBONE", "DEERLING", "DODUO", "DROWZEE", "DUCKLETT", "DUNSPARCE", "DUSKULL", "DWEBBLE", "ESPURR", "FINNEON", "FOONGUS", "FRILLISH", "FRILLISH-MALE", "FRILLISH-FEMALE", "GASTLY", "GLAMEOW", "GOLETT", "GRIMER", "GROWLITHE", "HELIOPTILE", "INKAY", "JOLTIK", "KOFFING", "LITWICK", "MAGNEMITE", "MANKEY", "MARILL", "MUNNA", "NATU", "NOIBAT", "PANPOUR", "PANSAGE", "PANSEAR", "PARAS", "PETILIL", "PICHU", "PIKACHU", "PINECO", "PONYTA", "PSYDUCK", "REMORAID", "RUFFLET", "SEEL", "SHELLDER", "SHELLOS", "SHELLOS-WEST SEA", "SHELLOS-EAST SEA", "SHUCKLE", "SLOWPOKE", "SLUGMA", "SNORUNT", "SNUBBULL", "TENTACOOL", "TOGEPI", "TRUBBISH", "TYNAMO", "VENONAT", "VOLTORB", "VULLABY", "VULPIX", "WHISMUR", "WINGULL", "WOOBAT", "YAMASK" };
        String[] catchRate200 = { "DEWPIDER", "ABRA", "CARNIVINE", "EMOLGA", "GOTHITA", "HARIYAMA", "KARRABLAST", "KECLEON", "MINUN", "PACHIRISU", "PLUSLE", "SHELMET", "SKIDDO", "SOLOSIS", "SPRITZEE", "SURSKIT", "SWIRLIX", "TAILLOW", "TROPIUS" };
        String[] catchRate220 = { "LITLEO", "PANCHAM" };
        String[] catchRate225 = { "CRABRAWLER", "CARVANHA", "CLAUNCHER", "FLABÉBÉ", "FLABEBE", "GOLDEEN", "GULPIN", "HORSEA", "KRABBY", "LUVDISC", "SHUPPET", "SKRELP", "STARYU", "STUNKY", "SWINUB", "UNOWN" };
        String[] catchRate235 = { "BOUNSWEET", "MAREEP", "NIDORAN♀", "NIDORAN♂", "RALTS", "SHINX", "SUNKERN" };
        String[] catchRate255 = { "GEODUDE-ALOLA", "DIGLETT-ALOLA", "MEOWTH-ALOLA", "SANDSHREW-ALOLA", "RATTATA-ALOLA", "NECROZMA", "GRUBBIN", "YUNGOOS", "PIKIPEK", "AUDINO", "BALTOY", "BELLSPROUT", "BIDOOF", "BONSLY", "BRONZOR", "BUDEW", "BUNNELBY", "CATERPIE", "CLAMPERL", "DIGLETT", "EKANS", "ELGYEM", "FEEBAS", "FERROSEED", "FLETCHLING", "GEODUDE", "HOOTHOOT", "HOPPIP", "KRICKETOT", "LEDYBA", "LILLIPUP", "LOTAD", "MAGIKARP", "MARACTUS", "MEOWTH", "MINCCINO", "NINCADA", "NOSEPASS", "NUMEL", "ODDISH", "PATRAT", "PIDGEY", "PIDOVE", "POLIWAG", "POOCHYENA", "PURRLOIN", "RATTATA", "ROGGENROLA", "SANDSHREW", "SCATTERBUG", "SEEDOT", "SENTRET", "SEWADDLE", "SHROOMISH", "SKITTY", "SLAKOTH", "SPEAROW", "SPHEAL", "SPINARAK", "SPINDA", "SPOINK", "STARLY", "SWABLU", "TRAPINCH", "TYMPOLE", "VANILLITE", "VENIPEDE", "WATCHOG", "WEEDLE", "WOOPER", "WURMPLE", "ZIGZAGOON", "ZUBAT" };

        //TYPES
        String types;
        String[] normalTypes = { "AIPOM", "AMBIPOM", "ARCEUS", "AUDINO", "AUDINO-MEGA", "AZURILL", "BIBAREL", "BIDOOF", "BLISSEY", "BOUFFALANT", "BRAVIARY", "BUNEARY", "BUNNELBY", "CASTFORM", "CHANSEY", "CHATOT", "CINCCINO", "DEERLING", "DELCATTY", "DIGGERSBY", "DITTO", "DODRIO", "DODUO", "DUNSPARCE", "EEVEE", "EXPLOUD", "FARFETCHD", "FEAROW", "FLETCHLING", "FURFROU", "FURRET", "GIRAFARIG", "GLAMEOW", "HAPPINY", "HELIOLISK", "HELIOPTILE", "HERDIER", "HOOTHOOT", "IGGLYBUFF", "JIGGLYPUFF", "KANGASKHAN", "KANGASKHAN-MEGA", "KECLEON", "LICKILICKY", "LICKITUNG", "LILLIPUP", "LINOONE", "LITLEO", "LOPUNNY", "LOPUNNY-MEGA", "LOUDRED", "MELOETTA", "MEOWTH", "MILTANK", "MINCCINO", "MUNCHLAX", "NOCTOWL", "PATRAT", "PERSIAN", "PIDGEOT", "PIDGEOT-MEGA", "PIDGEOTTO", "PIDGEY", "PIDOVE", "PORYGON", "PORYGON2", "PORYGONZ", "PURUGLY", "PYROAR", "RATICATE", "RATTATA", "REGIGIGAS", "RUFFLET", "SAWSBUCK", "SENTRET", "SKITTY", "SLAKING", "SLAKOTH", "SMEARGLE", "SNORLAX", "SPEAROW", "SPINDA", "STANTLER", "STARAPTOR", "STARAVIA", "STARLY", "STOUTLAND", "SWABLU", "SWELLOW", "TAILLOW", "TAUROS", "TEDDIURSA", "TRANQUILL", "UNFEZANT", "URSARING", "VIGOROTH", "WATCHOG", "WHISMUR", "WIGGLYTUFF", "ZANGOOSE", "ZIGZAGOON" };
        String[] fireTypes = { "ARCANINE", "BLAZIKEN", "BLAZIKEN-MEGA", "BRAIXEN", "CAMERUPT", "CAMERUPT-MEGA", "CASTFORM", "CHANDELURE", "CHARIZARD", "CHARIZARD-MEGA", "CHARMANDER", "CHARMELEON", "CHIMCHAR", "COMBUSKEN", "CYNDAQUIL", "DARMANITAN", "DARUMAKA", "DELPHOX", "EMBOAR", "ENTEI", "FENNEKIN", "FLAREON", "FLETCHINDER", "GROWLITHE", "HEATMOR", "HEATRAN", "HO-OH", "HOUNDOOM", "HOUNDOOM-MEGA", "HOUNDOUR", "INFERNAPE", "LAMPENT", "LARVESTA", "LITLEO", "LITWICK", "MAGBY", "MAGCARGO", "MAGMAR", "MAGMORTAR", "MOLTRES", "MONFERNO", "NINETALES", "NUMEL", "PANSEAR", "PIGNITE", "PONYTA", "PYROAR", "QUILAVA", "RAPIDASH", "RESHIRAM", "ROTOM-HEAT", "SIMISEAR", "SLUGMA", "TALONFLAME", "TEPIG", "TORCHIC", "TORKOAL", "TYPHLOSION", "VICTINI", "VOLCANION", "VOLCARONA", "VULPIX" };
        String[] waterTypes = { "ALOMOMOLA", "AZUMARILL", "BARBARACLE", "BARBOACH", "BASCULIN", "BIBAREL", "BINACLE", "BLASTOISE", "BLASTOISE-MEGA", "BUIZEL", "CARRACOSTA", "CARVANHA", "CASTFORM", "CHINCHOU", "CLAMPERL", "CLAUNCHER", "CLAWITZER", "CLOYSTER", "CORPHISH", "CORSOLA", "CRAWDAUNT", "CROCONAW", "DEWGONG", "DEWOTT", "DUCKLETT", "EMPOLEON", "FEEBAS", "FERALIGATR", "FINNEON", "FLOATZEL", "FRILLISH", "FROAKIE", "FROGADIER", "GASTRODON", "GOLDEEN", "GOLDUCK", "GOREBYSS", "GRENINJA", "GYARADOS", "GYARADOS-MEGA", "HORSEA", "HUNTAIL", "JELLICENT", "KABUTO", "KABUTOPS", "KELDEO", "KINGDRA", "KINGLER", "KRABBY", "KYOGRE", "LANTURN", "LAPRAS", "LOMBRE", "LOTAD", "LUDICOLO", "LUMINEON", "LUVDISC", "MAGIKARP", "MANAPHY", "MANTINE", "MANTYKE", "MARILL", "MARSHTOMP", "MILOTIC", "MUDKIP", "OCTILLERY", "OMANYTE", "OMASTAR", "OSHAWOTT", "PALKIA", "PALPITOAD", "PANPOUR", "PELIPPER", "PHIONE", "PIPLUP", "POLITOED", "POLIWAG", "POLIWHIRL", "POLIWRATH", "PRINPLUP", "PSYDUCK", "QUAGSIRE", "QWILFISH", "RELICANTH", "REMORAID", "ROTOM-WASH", "SAMUROTT", "SEADRA", "SEAKING", "SEALEO", "SEEL", "SEISMITOAD", "SHARPEDO", "SHARPEDO-MEGA", "SHELLDER", "SHELLOS", "SIMIPOUR", "SKRELP", "SLOWBRO", "SLOWBRO-MEGA", "SLOWKING", "SLOWPOKE", "SPHEAL", "SQUIRTLE", "STARMIE", "STARYU", "SUICUNE", "SURSKIT", "SWAMPERT", "SWAMPERT-MEGA", "SWANNA", "TENTACOOL", "TENTACRUEL", "TIRTOUGA", "TOTODILE", "TYMPOLE", "VAPOREON", "VOLCANION", "WAILMER", "WAILORD", "WALREIN", "WARTORTLE", "WHISCASH", "WINGULL", "WOOPER" };
        String[] electricTypes = { "AMPHAROS", "AMPHAROS-MEGA", "BLITZLE", "CHINCHOU", "DEDENNE", "EELEKTRIK", "EELEKTROSS", "ELECTABUZZ", "ELECTIVIRE", "ELECTRIKE", "ELECTRODE", "ELEKID", "EMOLGA", "FLAAFFY", "GALVANTULA", "HELIOLISK", "HELIOPTILE", "JOLTEON", "JOLTIK", "LANTURN", "LUXIO", "LUXRAY", "MAGNEMITE", "MAGNETON", "MAGNEZONE", "MANECTRIC", "MANECTRIC-MEGA", "MAREEP", "MINUN", "PACHIRISU", "PICHU", "PIKACHU", "PLUSLE", "RAICHU", "RAIKOU", "ROTOM", "ROTOM-FAN", "ROTOM-FROST", "ROTOM-HEAT", "ROTOM-MOW", "ROTOM-WASH", "SHINX", "STUNFISK", "THUNDURUS", "TYNAMO", "VOLTORB", "ZAPDOS", "ZEBSTRIKA", "ZEKROM" };
        String[] grassTypes = { "ABOMASNOW", "ABOMASNOW-MEGA", "AMOONGUSS", "BAYLEEF", "BELLOSSOM", "BELLSPROUT", "BRELOOM", "BUDEW", "BULBASAUR", "CACNEA", "CACTURNE", "CARNIVINE", "CELEBI", "CHERRIM", "CHERUBI", "CHESNAUGHT", "CHESPIN", "CHIKORITA", "COTTONEE", "CRADILY", "DEERLING", "EXEGGCUTE", "EXEGGUTOR", "FERROSEED", "FERROTHORN", "FOONGUS", "GLOOM", "GOGOAT", "GOURGEIST", "GROTLE", "GROVYLE", "HOPPIP", "IVYSAUR", "JUMPLUFF", "LEAFEON", "LEAVANNY", "LILEEP", "LILLIGANT", "LOMBRE", "LOTAD", "LUDICOLO", "MARACTUS", "MEGANIUM", "NUZLEAF", "ODDISH", "PANSAGE", "PARAS", "PARASECT", "PETILIL", "PHANTUMP", "PUMPKABOO", "QUILLADIN", "ROSELIA", "ROSERADE", "ROTOM-MOW", "SAWSBUCK", "SCEPTILE", "SCEPTILE-MEGA", "SEEDOT", "SERPERIOR", "SERVINE", "SEWADDLE", "SHAYMIN", "SHAYMIN-SKY", "SHIFTRY", "SHROOMISH", "SIMISAGE", "SKIDDO", "SKIPLOOM", "SNIVY", "SNOVER", "SUNFLORA", "SUNKERN", "SWADLOON", "TANGELA", "TANGROWTH", "TORTERRA", "TREECKO", "TREVENANT", "TROPIUS", "TURTWIG", "VENUSAUR", "VENUSAUR-MEGA", "VICTREEBEL", "VILEPLUME", "VIRIZION", "WEEPINBELL", "WHIMSICOTT", "WORMADAM" };
        String[] iceTypes = { "ABOMASNOW", "ABOMASNOW-MEGA", "AMAURA", "ARTICUNO", "AURORUS", "AVALUGG", "BEARTIC", "BERGMITE", "CASTFORM", "CLOYSTER", "CRYOGONAL", "CUBCHOO", "DELIBIRD", "DEWGONG", "FROSLASS", "GLACEON", "GLALIE", "GLALIE-MEGA", "JYNX", "KYUREM", "LAPRAS", "MAMOSWINE", "PILOSWINE", "REGICE", "ROTOM-FROST", "SEALEO", "SMOOCHUM", "SNEASEL", "SNORUNT", "SNOVER", "SPHEAL", "SWINUB", "VANILLISH", "VANILLITE", "VANILLUXE", "WALREIN", "WEAVILE" };
        String[] fightingTypes = { "BLAZIKEN", "BLAZIKEN-MEGA", "BRELOOM", "CHESNAUGHT", "COBALION", "COMBUSKEN", "CONKELDURR", "CROAGUNK", "EMBOAR", "GALLADE", "GALLADE-MEGA", "GURDURR", "HARIYAMA", "HAWLUCHA", "HERACROSS", "HERACROSS-MEGA", "HITMONCHAN", "HITMONLEE", "HITMONTOP", "INFERNAPE", "KELDEO", "LOPUNNY-MEGA", "LUCARIO", "LUCARIO-MEGA", "MACHAMP", "MACHOKE", "MACHOP", "MAKUHITA", "MANKEY", "MEDICHAM", "MEDICHAM-MEGA", "MEDITITE", "MEWTWO-MEGA", "MIENFOO", "MIENSHAO", "MONFERNO", "PANCHAM", "PANGORO", "PIGNITE", "POLIWRATH", "PRIMEAPE", "RIOLU", "SAWK", "SCRAFTY", "SCRAGGY", "TERRAKION", "THROH", "TIMBURR", "TOXICROAK", "TYROGUE", "VIRIZION" };
        String[] poisonTypes = { "AMOONGUSS", "ARBOK", "ARIADOS", "BEEDRILL", "BEEDRILL-MEGA", "BELLSPROUT", "BUDEW", "BULBASAUR", "CROAGUNK", "CROBAT", "DRAGALGE", "DRAPION", "DUSTOX", "EKANS", "FOONGUS", "GARBODOR", "GASTLY", "GENGAR", "GENGAR-MEGA", "GLOOM", "GOLBAT", "GRIMER", "GULPIN", "HAUNTER", "IVYSAUR", "KAKUNA", "KOFFING", "MUK", "NIDOKING", "NIDOQUEEN", "NIDORAN♀", "NIDORAN♂", "NIDORINA", "NIDORINO", "ODDISH", "QWILFISH", "ROSELIA", "ROSERADE", "SCOLIPEDE", "SEVIPER", "SKORUPI", "SKRELP", "SKUNTANK", "SPINARAK", "STUNKY", "SWALOT", "TENTACOOL", "TENTACRUEL", "TOXICROAK", "TRUBBISH", "VENIPEDE", "VENOMOTH", "VENONAT", "VENUSAUR", "VENUSAUR-MEGA", "VICTREEBEL", "VILEPLUME", "WEEDLE", "WEEPINBELL", "WEEZING", "WHIRLIPEDE", "ZUBAT" };
        String[] groundTypes = { "BALTOY", "BARBOACH", "CAMERUPT", "CAMERUPT-MEGA", "CLAYDOL", "CUBONE", "DIGGERSBY", "DIGLETT", "DONPHAN", "DRILBUR", "DUGTRIO", "EXCADRILL", "FLYGON", "GABITE", "GARCHOMP", "GARCHOMP-MEGA", "GASTRODON", "GEODUDE", "GIBLE", "GLIGAR", "GLISCOR", "GOLEM", "GOLETT", "GOLURK", "GRAVELER", "GROUDON", "HIPPOPOTAS", "HIPPOWDON", "KROKOROK", "KROOKODILE", "LANDORUS", "LARVITAR", "MAMOSWINE", "MAROWAK", "MARSHTOMP", "NIDOKING", "NIDOQUEEN", "NINCADA", "NUMEL", "ONIX", "PALPITOAD", "PHANPY", "PILOSWINE", "PUPITAR", "QUAGSIRE", "RHYDON", "RHYHORN", "RHYPERIOR", "SANDILE", "SANDSHREW", "SANDSLASH", "SEISMITOAD", "STEELIX", "STEELIX-MEGA", "STUNFISK", "SWAMPERT", "SWAMPERT-MEGA", "SWINUB", "TORTERRA", "TRAPINCH", "VIBRAVA", "WHISCASH", "WOOPER", "WORMADAM", "ZYGARDE" };
        String[] flyingTypes = { "AERODACTYL", "AERODACTYL-MEGA", "ALTARIA", "ARCHEN", "ARCHEOPS", "ARTICUNO", "BEAUTIFLY", "BRAVIARY", "BUTTERFREE", "CHARIZARD", "CHATOT", "COMBEE", "CROBAT", "DELIBIRD", "DODRIO", "DODUO", "DRAGONITE", "DRIFBLIM", "DRIFLOON", "DUCKLETT", "EMOLGA", "FAN ROTOM", "FARFETCH'D", "FEAROW", "FLETCHINDER", "FLETCHLING", "GLIGAR", "GLISCOR", "GOLBAT", "GYARADOS", "HAWLUCHA", "HO-OH", "HONCHKROW", "HOOTHOOT", "HOPPIP", "JUMPLUFF", "LANDORUS", "LEDIAN", "LEDYBA", "LUGIA", "MANDIBUZZ", "MANTINE", "MANTYKE", "MASQUERAIN", "MOLTRES", "MOTHIM", "MURKROW", "NATU", "NINJASK", "NOCTOWL", "NOIBAT", "NOIVERN", "PELIPPER", "PIDGEOT", "PIDGEOT-MEGA", "PIDGEOTTO", "PIDGEY", "PIDOVE", "PINSIR-MEGA", "RAYQUAZA", "RAYQUAZA-MEGA", "RUFFLET", "SALAMENCE", "SALAMENCE-MEGA", "SCYTHER", "SHAYMIN", "SIGILYPH", "SKARMORY", "SKIPLOOM", "SKY FORME", "SPEAROW", "STARAPTOR", "STARAVIA", "STARLY", "SWABLU", "SWANNA", "SWELLOW", "SWOOBAT", "TAILLOW", "TALONFLAME", "THUNDURUS", "TOGEKISS", "TOGETIC", "TORNADUS", "TRANQUILL", "TROPIUS", "UNFEZANT", "VESPIQUEN", "VIVILLON", "VULLABY", "WINGULL", "WOOBAT", "XATU", "YANMA", "YANMEGA", "YVELTAL", "ZAPDOS", "ZUBAT" };
        String[] psychicTypes = { "ABRA", "ALAKAZAM", "ALAKAZAM-MEGA", "AZELF", "BALTOY", "BEHEEYEM", "BELDUM", "BRONZONG", "BRONZOR", "CELEBI", "CHIMECHO", "CHINGLING", "CLAYDOL", "CRESSELIA", "DARMANITAN", "DELPHOX", "DEOXYS", "DROWZEE", "DUOSION", "ELGYEM", "ESPEON", "ESPURR", "EXEGGCUTE", "EXEGGUTOR", "GALLADE", "GALLADE-MEGA", "GARDEVOIR", "GARDEVOIR-MEGA", "GIRAFARIG", "GOTHITA", "GOTHITELLE", "GOTHORITA", "GRUMPIG", "HOOPA", "HYPNO", "INKAY", "JIRACHI", "JYNX", "KADABRA", "KIRLIA", "LATIAS", "LATIAS-MEGA", "LATIOS", "LATIOS-MEGA", "LUGIA", "LUNATONE", "MALAMAR", "MEDICHAM", "MEDICHAM-MEGA", "MEDITITE", "MELOETTA", "MEOWSTIC", "MESPRIT", "METAGROSS", "METAGROSS-MEGA", "METANG", "MEW", "MEWTWO", "MEWTWO X", "MIME JR.", "MR. MIME", "MUNNA", "MUSHARNA", "NATU", "RALTS", "REUNICLUS", "SIGILYPH", "SLOWBRO", "SLOWBRO-MEGA", "SLOWKING", "SLOWPOKE", "SMOOCHUM", "SOLOSIS", "SOLROCK", "SPOINK", "STARMIE", "SWOOBAT", "UNOWN", "UXIE", "VICTINI", "WOBBUFFET", "WOOBAT", "WYNAUT", "XATU" };
        String[] bugTypes = { "CATERPIE", "METAPOD", "PINSIR", "PINECO", "WURMPLE", "SILCOON", "CASCOON", "VOLBEAT", "ILLUMISE", "KRICKETOT", "KRICKETUNE", "BURMY", "KARRABLAST", "SHELMET", "ACCELGOR", "SCATTERBUG", "SPEWPA", "BUTTERFREE", "WEEDLE", "KAKUNA", "BEEDRILL", "BEEDRILL-MEGA", "PARAS", "PARASECT", "VENONAT", "VENOMOTH", "SCYTHER", "PINSIR", "LEDYBA", "LEDIAN", "SPINARAK", "ARIADOS", "YANMA", "FORRETRESS", "SCIZOR", "SCIZOR-MEGA", "SHUCKLE", "HERACROSS", "HERACROSS-MEGA", "BEAUTIFLY", "DUSTOX", "SURSKIT", "MASQUERAIN", "NINCADA", "NINJASK", "SHEDINJA", "WORMADAM", "MOTHIM", "COMBEE", "VESPIQUEN", "YANMEGA", "SEWADDLE", "SWADLOON", "LEAVANNY", "VENIPEDE", "WHIRLIPEDE", "SCOLIPEDE", "DWEBBLE", "CRUSTLE", "ESCAVALIER", "JOLTIK", "GALVANTULA", "DURANT", "LARVESTA", "VOLCARONA", "GENESECT", "VIVILLON", "ANORITH", "ARMALDO", "SKORUPI" };
        String[] rockTypes = { "AERODACTYL", "AERODACTYL-MEGA", "AGGRON", "AMAURA", "ANORITH", "ARCHEN", "ARCHEOPS", "ARMALDO", "ARON", "AURORUS", "BARBARACLE", "BASTIODON", "BINACLE", "BOLDORE", "BONSLY", "CARBINK", "CARRACOSTA", "CORSOLA", "CRADILY", "CRANIDOS", "CRUSTLE", "DIANCIE", "DIANCIE-MEGA", "DWEBBLE", "GEODUDE", "GIGALITH", "GOLEM", "GRAVELER", "KABUTO", "KABUTOPS", "LAIRON", "LARVITAR", "LILEEP", "LUNATONE", "MAGCARGO", "NOSEPASS", "OMANYTE", "OMASTAR", "ONIX", "PROBOPASS", "PUPITAR", "RAMPARDOS", "REGIROCK", "RELICANTH", "RHYDON", "RHYHORN", "RHYPERIOR", "ROGGENROLA", "SHIELDON", "SHUCKLE", "SOLROCK", "SUDOWOODO", "TERRAKION", "TIRTOUGA", "TYRANITAR", "TYRANITAR-MEGA", "TYRANTRUM", "TYRUNT" };
        String[] ghostTypes = { "AEGISLASH", "BANETTE", "BANETTE", "CHANDELURE", "COFAGRIGUS", "DOUBLADE", "DRIFBLIM", "DRIFLOON", "DUSCLOPS", "DUSKNOIR", "DUSKULL", "FRILLISH", "FROSLASS", "GASTLY", "GENGAR", "GENGAR-MEGA", "GIRATINA", "GOLETT", "GOLURK", "GOURGEIST", "HAUNTER", "HONEDGE", "HOOPA", "JELLICENT", "LAMPENT", "LITWICK", "MISDREAVUS", "MISMAGIUS", "PHANTUMP", "PUMPKABOO", "ROTOM", "SABLEYE", "SABLEYE", "SHEDINJA", "SHUPPET", "SPIRITOMB", "TREVENANT", "YAMASK" };
        String[] dragonTypes = { "ALTARIA", "ALTARIA-MEGA", "AMPHAROS", "AXEW", "BAGON", "CHARIZARD-MEGA", "DEINO", "DIALGA", "DRAGALGE", "DRAGONAIR", "DRAGONITE", "DRATINI", "DRUDDIGON", "FLYGON", "FRAXURE", "GABITE", "GARCHOMP", "GARCHOMP-MEGA", "GIBLE", "GIRATINA", "GOODRA", "GOOMY", "HAXORUS", "HYDREIGON", "KINGDRA", "KYUREM", "LATIAS", "LATIAS-MEGA", "LATIOS", "LATIOS-MEGA", "NOIBAT", "NOIVERN", "PALKIA", "RAYQUAZA", "RAYQUAZA-MEGA", "RESHIRAM", "SALAMENCE", "SALAMENCE-MEGA", "SCEPTILE", "SHELGON", "SLIGGOO", "TYRANTRUM", "TYRUNT", "VIBRAVA", "ZEKROM", "ZWEILOUS", "ZYGARDE" };
        String[] darkTypes = { "ABSOL", "ABSOL-MEGA", "BISHARP", "CACTURNE", "CARVANHA", "CRAWDAUNT", "DARKRAI", "DEINO", "DRAPION", "GRENINJA", "GYARADOS-MEGA", "HONCHKROW", "HOUNDOOM", "HOUNDOOM-MEGA", "HOUNDOUR", "HYDREIGON", "INKAY", "KROKOROK", "KROOKODILE", "LIEPARD", "MALAMAR", "MANDIBUZZ", "MIGHTYENA", "MURKROW", "NUZLEAF", "PANGORO", "PAWNIARD", "POOCHYENA", "PURRLOIN", "SABLEYE", "SABLEYE-MEGA", "SANDILE", "SCRAFTY", "SCRAGGY", "SHARPEDO", "SHARPEDO-MEGA", "SHIFTRY", "SKUNTANK", "SNEASEL", "SPIRITOMB", "STUNKY", "TYRANITAR", "TYRANITAR-MEGA", "UMBREON", "VULLABY", "WEAVILE", "YVELTAL", "ZOROARK", "ZORUA", "ZWEILOUS" };
        String[] steelTypes = { "AEGISLASH", "AGGRON", "AGGRON-MEGA", "ARON", "BASTIODON", "BELDUM", "BISHARP", "BRONZONG", "BRONZOR", "COBALION", "DIALGA", "DOUBLADE", "DURANT", "EMPOLEON", "ESCAVALIER", "EXCADRILL", "FERROSEED", "FERROTHORN", "FORRETRESS", "GENESECT", "HEATRAN", "HONEDGE", "JIRACHI", "KLANG", "KLEFKI", "KLINK", "KLINKLANG", "LAIRON", "LUCARIO", "LUCARIO-MEGA", "MAGNEMITE", "MAGNETON", "MAGNEZONE", "MAWILE", "MAWILE-MEGA", "METAGROSS", "METAGROSS-MEGA", "METANG", "PAWNIARD", "PROBOPASS", "REGISTEEL", "SCIZOR", "SCIZOR-MEGA", "SHIELDON", "SKARMORY", "STEELIX", "STEELIX-MEGA", "WORMADAM" };
        String[] fairyTypes = { "CLEFAIRY", "CLEFABLE", "CLEFFA", "TOGEPI", "SNUBBULL", "GRANBULL", "FLABÉBÉ", "FLOETTE", "FLORGES", "SPRITZEE", "AROMATISSE", "SWIRLIX", "SLURPUFF", "SYLVEON", "XERNEAS", "TOGETIC", "TOGEKISS", "JIGGLYPUFF", "WIGGLYTUFF", "MR. MIME", "IGGLYBUFF", "MARILL", "AZUMARILL", "RALTS", "KIRLIA", "GARDEVOIR", "GARDEVOIR-MEGA", "AZURILL", "MAWILE", "MAWILE-MEGA", "ALTARIA-MEGA", "MIME JR.", "AUDINO-MEGA", "COTTONEE", "WHIMSICOTT", "DEDENNE", "CARBINK", "KLEFKI", "DIANCIE", "DIANCIE-MEGA" };


        private void throwBallButton_Click(object sender, EventArgs e)
        {
            if (pokemonBox.Text == "")
            {
                MessageBox.Show("Please enter an existing Pokémon into the textbox.", "Battle Error");
                return;
            }

            if (ballChosenBox.Text == "")
            {
                MessageBox.Show("Please enter the type of ball you are using to attempt to catch the Pokémon.");
                return;
            }

            if (pokMaxHPBox.Text == "" || float.Parse(pokMaxHPBox.Text) > 255)
            {
                MessageBox.Show("Please enter a valid maximum HP for the Pokémon.");
                return;
            }

            if (pokCurrentHPBox.Text == "" || float.Parse(pokCurrentHPBox.Text) > float.Parse(pokMaxHPBox.Text))
            {
                MessageBox.Show("Please enter a valid current HP for the Pokémon that does not exceed the maximum HP.");
                return;
            }

            if (pokStatusBox.Text.ToUpper() == "SLP" || pokStatusBox.Text.ToUpper() == "FRZ")
            {
                statVal = 24;
            }
            else if (pokStatusBox.Text.ToUpper() == "PAR" || pokStatusBox.Text.ToUpper() == "BRN" || pokStatusBox.Text.ToUpper() == "PSN")
            {
                statVal = 12;
            }
            else
            {
                statVal = 0;
            }

            if (ballChosenBox.Text.ToUpper().Contains("POK") && PB > 0)
            {
                PB--;
                N = rnd.Next(0, 255);
                normalBall = Properties.Resources.PokeBall_normal;
                rightBall = Properties.Resources.PokeBall_right;
                leftBall = Properties.Resources.PokeBall_left;
                caughtBall = Properties.Resources.PokeBall_caught;
            }
            else if (ballChosenBox.Text.ToUpper().Contains("GRE") && GB > 0)
            {
                GB--;
                N = rnd.Next(0, 200);
                currentBallShakes = 0;
                normalBall = Properties.Resources.Great_Ball_normal;
                rightBall = Properties.Resources.Great_Ball_right;
                leftBall = Properties.Resources.Great_Ball_left;
                caughtBall = Properties.Resources.Great_Ball_caught;
            }
            else if (ballChosenBox.Text.ToUpper().Contains("ULT") && UB > 0)
            {
                UB--;
                normalBall = Properties.Resources.Ultra_Ball_normal;
                rightBall = Properties.Resources.Ultra_Ball_right;
                leftBall = Properties.Resources.Ultra_Ball_left;
                caughtBall = Properties.Resources.Ultra_Ball_caught;
                N = rnd.Next(0, 150);
            }
            else if (ballChosenBox.Text.ToUpper().Contains("SAF") && SB > 0)
            {
                SB--;
                normalBall = Properties.Resources.Safari_Ball;
                rightBall = Properties.Resources.Safari_Ball_right;
                leftBall = Properties.Resources.Safari_Ball_left;
                caughtBall = Properties.Resources.Safari_Ball_caught;
                N = rnd.Next(0, 150);
            }
            else if (ballChosenBox.Text.ToUpper().Contains("MAS") && MB > 0)
            {
                MB--;
                caughtTimer.Start();
                Console.WriteLine("Will be Caught");
                currentBallShakes = 0;
                rightBall = Properties.Resources.Master_Ball_right;
                leftBall = Properties.Resources.Master_Ball_left;
                normalBall = Properties.Resources.Master_Ball_normal;
                caughtBall = Properties.Resources.Master_Ball_caught;
            }
            else
            {
                MessageBox.Show("You don't have enough of the chosen ball type.");
                return;
            }

            if (N < 12 && (pokStatusBox.Text.ToUpper() == "PAR" || pokStatusBox.Text.ToUpper() == "BRN" || pokStatusBox.Text.ToUpper() == "PSN"))
            {
                caughtTimer.Start();
                Console.WriteLine("Will be Caught");
                currentBallShakes = 0;
            }
            else if (N < 25 && (pokStatusBox.Text.ToUpper() == "SLP" || pokStatusBox.Text.ToUpper() == "FRZ"))
            {
                caughtTimer.Start();
                Console.WriteLine("Will be Caught");
                currentBallShakes = 0;
            }
            else
            {
                if (N - statVal <= r)
                {
                    caughtTimer.Start();
                    Console.WriteLine("Will be Caught");
                    currentBallShakes = 0;
                }
                else
                {
                    M = rnd.Next(0, 255);
                    b = ballChosenBox.Text.ToUpper().Contains("GRE") ? 8 : 12;
                    f = (1020 * H) / (b * h);

                    if (Math.Round(f) >= M)
                    {
                        caughtTimer.Start();
                        Console.WriteLine("Will be Caught");
                        currentBallShakes = 0;
                    }
                    else
                    {
                        b = ballChosenBox.Text.ToUpper().Contains("POK") ? 255 : ballChosenBox.Text.ToUpper().Contains("GRE") ? 200 : 150;
                        d = (100 * r) / b;

                        if (d >= 256)
                        {
                            ballShakes = 3;
                            freeTimer.Start();
                            Console.WriteLine("Ball will shake " + ballShakes + " times before Pokémon breaks free");
                            currentBallShakes = 0;
                        }
                        else
                        {
                            if (pokStatusBox.Text.ToUpper() == "SLP" || pokStatusBox.Text.ToUpper() == "FRZ")
                            {
                                s = 10;
                            }
                            else if (pokStatusBox.Text.ToUpper() == "PAR" || pokStatusBox.Text.ToUpper() == "PSN" || pokStatusBox.Text.ToUpper() == "BRN")
                            {
                                s = 5;
                            }
                            else
                            {
                                s = 0;
                            }

                            x = (d * f) / (s + 255);

                            if (x < 10)
                            {
                                ballShakes = 0;
                                currentBallShakes = 0;
                                freeTimer.Start();
                                Console.WriteLine("Ball will miss");
                            }
                            else if (x < 30)
                            {
                                ballShakes = 1;
                                currentBallShakes = 0;
                                freeTimer.Start();
                                Console.WriteLine("Ball will shake " + ballShakes + " times before Pokémon breaks free");
                            }
                            else if (x < 70)
                            {
                                ballShakes = 2;
                                freeTimer.Start();
                                Console.WriteLine("Ball will shake " + ballShakes + " times before Pokémon breaks free");
                                currentBallShakes = 0;
                            }
                            else
                            {
                                ballShakes = 3;
                                freeTimer.Start();
                                Console.WriteLine("Ball will shake " + ballShakes + " times before Pokémon breaks free");
                                currentBallShakes = 0;
                            }
                        }
                    }
                }
            }

            // Disable UI elements
            battleButton.Enabled = false;
            throwBallButton.Enabled = false;
            ballChosenBox.Enabled = false;
            randomBallButton.Enabled = false;
            pokMaxHPBox.Enabled = false;
            randomMaxHPButton.Enabled = false;
            pokCurrentHPBox.Enabled = false;
            randomCurrentHPButton.Enabled = false;
            pokStatusBox.Enabled = false;
            randomStatusButton.Enabled = false;
        }


        private void caughtTimer_Tick(object sender, EventArgs e)
        {
            const int maxBallShakes = 400;
            const int minMoneyToAdd = 255;
            const int maxMoneyToAdd = 9001;

            currentBallShakes += 6;

            if (currentBallShakes >= maxBallShakes)
            {
                caughtTimer.Stop();

                int moneyToAdd = rnd.Next(minMoneyToAdd, maxMoneyToAdd + 1) / int.Parse(catchRateBox.Text);
                money += moneyToAdd;
                moneyLabel.Text = money.ToString();

                caughtLabel.Text = pokemonBox.Text.ToUpper() + " Caught!";
                pokeBallBox.Image = caughtBall;

                if (pokemonTeamBox.Items.Count < 6)
                {
                    pokemonTeamBox.Items.Add(pokemonBox.Text.ToUpper());
                }
                else
                {
                    pcBox.Items.Add(pokemonBox.Text.ToUpper());
                }

                ballChosenBox.Clear();
                pokStatusBox.Clear();
                catchRateBox.Clear();
                pokMaxHPBox.Clear();
                pokCurrentHPBox.Clear();
                pokemonBox.Clear();

                battleButton.Enabled = true;
                battleButton.Text = "Battle";
                randomPokemonButton.Enabled = true;
                throwBallButton.Enabled = true;
                randomBallButton.Enabled = true;
                pokMaxHPBox.Enabled = true;
                randomMaxHPButton.Enabled = true;
                pokCurrentHPBox.Enabled = true;
                randomCurrentHPButton.Enabled = true;
                pokStatusBox.Enabled = true;
                randomStatusButton.Enabled = true;
                pokemonBox.Enabled = true;
                pokemonTeamBox.Enabled = true;
                pcBox.Enabled = true;

                goodToGo = false;
            }
            else if (currentBallShakes < 50)
            {
                caughtLabel.Text = "Good aim!";
                pokeBallBox.Image = normalBall;
            }
            else if (currentBallShakes < 100 || (currentBallShakes >= 150 && currentBallShakes < 200) || (currentBallShakes >= 250 && currentBallShakes < 300))
            {
                pokeBallBox.Image = normalBall;
            }
            else if (currentBallShakes < 150)
            {
                pokeBallBox.Image = rightBall;
            }
            else if ((currentBallShakes >= 200) && (currentBallShakes < 250))
            {
                pokeBallBox.Image = leftBall;
            }
        }


        private void freeTimer_Tick(object sender, EventArgs e)
        {
            currentBallShakes += 6;

            if (currentBallShakes < (ballShakes * 100) + 100)
            {
                if (currentBallShakes < 50)
                {
                    caughtLabel.Text = "Good aim!";
                    pokeBallBox.Image = normalBall;
                }
                else if (currentBallShakes < 100)
                {
                    caughtLabel.Text = "";
                    pokeBallBox.Image = rightBall;
                }
                else if (currentBallShakes < 150 || (currentBallShakes >= 200 && currentBallShakes < 250) || (currentBallShakes >= 300 && currentBallShakes < 350))
                {
                    pokeBallBox.Image = normalBall;
                }
                else if (currentBallShakes < 200)
                {
                    pokeBallBox.Image = leftBall;
                }
            }
            else
            {
                freeTimer.Stop();

                if (ballShakes == 0)
                {
                    caughtLabel.Text = "Ball missed!";
                }
                else
                {
                    pokeBallBox.Image = Properties.Resources.Ball_Open;
                    caughtLabel.Text = pokemonBox.Text.ToUpper() + " Broke Free!";
                }

                if (ballShakes * 100 == 100)
                {
                    pokeBallBox.Image = Image.FromFile(filePath + pokemonBox.Text.ToLower() + ".gif");
                }
                else
                {
                    pokeBallBox.Image = Image.FromFile(filePath + pokemonBox.Text.ToUpper() + ".gif");
                }

                ballChosenBox.Enabled = true;
                randomBallButton.Enabled = true;
                pokMaxHPBox.Enabled = true;
                pokCurrentHPBox.Enabled = true;
                goodToGo = false;
                battleButton.Enabled = true;
                randomPokemonButton.Enabled = true;
                pokemonBox.Enabled = true;
                throwBallButton.Enabled = true;
                randomMaxHPButton.Enabled = true;
                randomCurrentHPButton.Enabled = true;
                pokStatusBox.Enabled = true;
                randomStatusButton.Enabled = true;

                freeTimer.Stop();
            }
        }


        private void label1_Click(object sender, EventArgs e)
        {
            MessageBox.Show($"PokeBall ({PB}), Great Ball ({GB}), Ultra Ball ({UB}), Safari Ball ({SB}), Master Ball ({MB}).", "Write either:");

            if (!hintShown)
            {
                MessageBox.Show("Master Balls catch Pokémon with no chance of failure!", "Master Ball Help");
                hintShown = true;
            }
        }


        private void label2_Click(object sender, EventArgs e) //Pokemon Status Label
        {
            MessageBox.Show("Asleep (SLP), Frozen (FRZ), Paralyzed (PAR), Burnt (BRN), Poisoned (PSN), Leave Blank If None", "Write either:");
        }

        private void label3_Click(object sender, EventArgs e) //Catch Rate Label
        {
            MessageBox.Show("A high catch rate makes the Pokémon easier to catch!", "Catch Rate Help");
        }

        private void label4_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Number between (1-255)", "Write a:");
        }

        private void currentHPLabel_Click(object sender, EventArgs e)
        {
            string maxHP = pokMaxHPBox.Text;

            if (string.IsNullOrEmpty(maxHP))
            {
                MessageBox.Show("Number between (1-255)", "Write a:");
            }
            else
            {
                MessageBox.Show($"Number between (1-{maxHP})", "Write a:");
            }
        }

        private void Search_Click(object sender, EventArgs e)
        {
            caughtLabel.Text = "";
            throwBallButton.Enabled = true;

            string enteredPokemon = pokemonBox.Text.ToUpper();

            if (string.IsNullOrEmpty(enteredPokemon))
            {
                MessageBox.Show("Please enter a Pokémon into the textbox.", "Registry Error");
            }
            else if (!pokemon.Contains(enteredPokemon))
            {
                MessageBox.Show("Please enter an existing Pokémon into the textbox.", "Registry Error");
            }
            else if (battleButton.Text == "Battle")
            {
                ballChosenBox.Clear();
                pokStatusBox.Clear();
                pokMaxHPBox.Clear();
                pokCurrentHPBox.Clear();
                battleButton.Text = "Run";
                randomPokemonButton.Enabled = false;
                pokemonBox.Enabled = false;
                pokemonTeamBox.Enabled = false;
                pcBox.Enabled = false;
                pokeBallBox.Image = Image.FromFile(filePath + enteredPokemon.ToLower() + ".gif");
                pokemonBox.Text = enteredPokemon;

                // Types
                if (normalTypes.Contains(enteredPokemon))
                    types = types + "  Normal";
                if (fireTypes.Contains(enteredPokemon))
                    types = types + " Fire";
                if (waterTypes.Contains(enteredPokemon))
                    types = types + " Water";
                if (electricTypes.Contains(enteredPokemon))
                    types = types + " Electric";
                if (grassTypes.Contains(enteredPokemon))
                    types = types + " Grass";
                if (iceTypes.Contains(enteredPokemon))
                    types = types + " Ice";
                if (fightingTypes.Contains(enteredPokemon))
                    types = types + " Fighting";
                if (poisonTypes.Contains(enteredPokemon))
                    types = types + " Poison";
                if (groundTypes.Contains(enteredPokemon))
                    types = types + " Ground";
                if (flyingTypes.Contains(enteredPokemon))
                    types = types + " Flying";
                if (psychicTypes.Contains(enteredPokemon))
                    types = types + " Psychic";
                if (bugTypes.Contains(enteredPokemon))
                    types = types + " Bug";
                if (rockTypes.Contains(enteredPokemon))
                    types = types + " Rock";
                if (ghostTypes.Contains(enteredPokemon))
                    types = types + " Ghost";
                if (dragonTypes.Contains(enteredPokemon))
                    types = types + " Dragon";
                if (darkTypes.Contains(enteredPokemon))
                    types = types + " Dark";
                if (steelTypes.Contains(enteredPokemon))
                    types = types + " Steel";
                if (fairyTypes.Contains(enteredPokemon))
                    types = types + " Fairy";

                // Catch Rates
                if (catchRate3.Contains(enteredPokemon))
                    catchRateBox.Text = "3";
                else if (enteredPokemon == "VOLCARONA")
                    catchRateBox.Text = "15";
                else if (catchRate25.Contains(enteredPokemon))
                    catchRateBox.Text = "25";
                else if (catchRate30.Contains(enteredPokemon))
                    catchRateBox.Text = "30";
                else if (enteredPokemon == "DITTO")
                    catchRateBox.Text = "35";
                else if (catchRate45.Contains(enteredPokemon))
                    catchRateBox.Text = "45";
                else if (catchRate50.Contains(enteredPokemon))
                    catchRateBox.Text = "50";
                else if (catchRate55.Contains(enteredPokemon))
                    catchRateBox.Text = "55";
                else if (catchRate60.Contains(enteredPokemon))
                    catchRateBox.Text = "60";
                else if (catchRate65.Contains(enteredPokemon))
                    catchRateBox.Text = "65";
                else if (enteredPokemon == "SLOWKING")
                    catchRateBox.Text = "70";
                else if (catchRate75.Contains(enteredPokemon))
                    catchRateBox.Text = "75";
                else if (enteredPokemon == "MALAMAR")
                    catchRateBox.Text = "80";
                else if (catchRate90.Contains(enteredPokemon))
                    catchRateBox.Text = "90";
                else if (catchRate100.Contains(enteredPokemon))
                    catchRateBox.Text = "100";
                else if (catchRate120.Contains(enteredPokemon))
                    catchRateBox.Text = "120";
                else if (catchRate125.Contains(enteredPokemon))
                    catchRateBox.Text = "125";
                else if (catchRate127.Contains(enteredPokemon))
                    catchRateBox.Text = "127";
                else if (catchRate130.Contains(enteredPokemon))
                    catchRateBox.Text = "130";
                else if (catchRate140.Contains(enteredPokemon))
                    catchRateBox.Text = "140";
                else if (enteredPokemon == "MIME JR.")
                    catchRateBox.Text = "145";
                else if (catchRate150.Contains(enteredPokemon))
                    catchRateBox.Text = "150";
                else if (enteredPokemon == "CRAWDAUNT")
                    catchRateBox.Text = "155";
                else if (enteredPokemon == "FURFROU")
                    catchRateBox.Text = "160";
                else if (catchRate170.Contains(enteredPokemon))
                    catchRateBox.Text = "170";
                else if (catchRate180.Contains(enteredPokemon))
                    catchRateBox.Text = "180";
                else if (catchRate190.Contains(enteredPokemon))
                    catchRateBox.Text = "190";
                else if (catchRate200.Contains(enteredPokemon))
                    catchRateBox.Text = "200";
                else if (enteredPokemon == "CORPHISH")
                    catchRateBox.Text = "205";
                else if (catchRate220.Contains(enteredPokemon))
                    catchRateBox.Text = "220";
                else if (catchRate225.Contains(enteredPokemon))
                    catchRateBox.Text = "225";
                else if (catchRate235.Contains(enteredPokemon))
                    catchRateBox.Text = "235";
                else if (catchRate255.Contains(enteredPokemon))
                    catchRateBox.Text = "255";
            }
            else if (battleButton.Text == "Run")
            {
                caughtLabel.Text = "You ran from " + enteredPokemon + "!";
                ballChosenBox.Clear();
                pokStatusBox.Clear();
                pokMaxHPBox.Clear();
                pokCurrentHPBox.Clear();
                catchRateBox.Clear();
                battleButton.Text = "Battle";
                randomPokemonButton.Enabled = true;
                pokemonBox.Enabled = true;
                pokemonBox.Clear();
                pokemonTeamBox.Enabled = true;
                pcBox.Enabled = true;
                pokeBallBox.Image = null;
            }
        }


        private void label5_Click(object sender, EventArgs e) //Pokemon Name Label
        {
            MessageBox.Show("Put Pokémon Name Here!", "Name Help");
            MessageBox.Show("Catch rate will automatically be fetched.", "Catch Rate Help");
        }

        private void addTeamReleaseButton_Click(object sender, EventArgs e)
        {
            if (pokemonTeamBox.Items.Count < 6)
            {
                string selectedItem = pcBox.SelectedItem?.ToString();
                if (!string.IsNullOrEmpty(selectedItem))
                {
                    pokemonTeamBox.Items.Add(selectedItem);
                    pcBox.Items.Remove(selectedItem);
                    pokeBallBox.Image = null;
                }
            }
            else
            {
                MessageBox.Show("Not Enough Space In Party", "Capacity Error");
            }

            pokemonBox.Clear();
        }


        private void pokemonTeamBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            throwBallButton.Enabled = false;

            if (pokemonTeamBox.SelectedIndex != -1)
            {
                deselectButton.Enabled = true;

                string selectedItem = pokemonTeamBox.SelectedItem.ToString();
                if (MegaStone > 0 && megas.Contains(selectedItem.ToUpper()))
                {
                    megaEvolveButton.Show();
                }

                if (pokemon.Contains(selectedItem) || megaNames.Contains(selectedItem.ToUpper()))
                {
                    pokeBallBox.Image = Image.FromFile(filePath + selectedItem.ToLower() + ".gif");
                }
                else
                {
                    pokeBallBox.Image = null;
                }

                addToPCButton.Enabled = true;
                caughtLabel.Text = "";
            }
            else
            {
                deselectButton.Enabled = false;
                pokeBallBox.Image = null;
                megaEvolveButton.Hide();
                battleButton.Enabled = true;
                addToPCButton.Enabled = false;
                caughtLabel.Text = "";
                pokemonNameLabel.Text = "Pokémon Name:";
            }

            addToTeamButton.Enabled = false;
            releaseButton.Enabled = false;
        }

        private void pcBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            addToPCButton.Enabled = false;

            if (pcBox.SelectedIndex != -1)
            {
                deselectButton.Enabled = true;

                string selectedItem = pcBox.SelectedItem.ToString();
                if (pokemon.Contains(selectedItem))
                {
                    pokeBallBox.Image = Image.FromFile(filePath + selectedItem + ".gif");
                }
                else
                {
                    pokeBallBox.Image = null;
                }

                addToTeamButton.Enabled = true;
                releaseButton.Enabled = true;
                caughtLabel.Text = "";
            }
            else
            {
                deselectButton.Enabled = false;
                releaseButton.Enabled = false;
                addToTeamButton.Enabled = false;
                pokeBallBox.Image = null;
            }
        }


        private void addToPCButton_Click(object sender, EventArgs e)
        {
            if (pokemonTeamBox.SelectedItem != null)
            {
                pcBox.Items.Add(pokemonTeamBox.SelectedItem.ToString());
                pokemonTeamBox.Items.Remove(pokemonTeamBox.SelectedItem);
                pokeBallBox.Image = null;
                pokemonBox.Clear();
            }
        }

        private void releaseButton_Click(object sender, EventArgs e)
        {
            if (pcBox.SelectedItem != null && pokemonTeamBox.SelectedItem != null)
            {
                string releasedPokemon = pcBox.SelectedItem.ToString();
                caughtLabel.Text = releasedPokemon + " was released!";
                pcBox.Items.Remove(releasedPokemon);
                pokemonTeamBox.Items.Remove(releasedPokemon);
                pokemonBox.Clear();
            }
        }


        private void label6_Click(object sender, EventArgs e) //Current Team Label
        {
            MessageBox.Show("Pokémon in your party to carry.", "Team Help");
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            MegaStone = 0; //default=0
            PB = 10; //default=10
            GB = 5; //default=5
            SB = 3; //default=3
            UB = 3; //default=3
            MB = 1; //default=1
            money = 999999; //default=50
            moneyLabel.Text = money.ToString();
        }

        private void buyPBButton_Click(object sender, EventArgs e)
        {
            const int pokeBallCost = 200;

            if (money >= pokeBallCost)
            {
                PB++;
                money -= pokeBallCost;
                moneyLabel.Text = money.ToString();
            }
        }


        private void buyPBButton_MouseHover(object sender, EventArgs e)
        {
            pointer1.Show();
            martLogo.Image = Properties.Resources.PokeBall_Display;
        }

        private void buyGBButton_MouseHover(object sender, EventArgs e)
        {
            pointer2.Show();
            martLogo.Image = Properties.Resources.Great_Ball_Display;
        }

        private void buyGBButton_MouseLeave(object sender, EventArgs e)
        {
            pointer2.Hide();
            martLogo.Image = Properties.Resources.PokeMart_Icon;
        }

        private void buyPBButton_MouseLeave(object sender, EventArgs e)
        {
            pointer1.Hide();
            martLogo.Image = Properties.Resources.PokeMart_Icon;
        }

        private void buyUBButton_MouseHover(object sender, EventArgs e)
        {
            pointer3.Show();
            martLogo.Image = Properties.Resources.Ultra_Ball_Display;
        }

        private void buyUBButton_MouseLeave(object sender, EventArgs e)
        {
            pointer3.Hide();
            martLogo.Image = Properties.Resources.PokeMart_Icon;
        }

        private void buySBButton_MouseHover(object sender, EventArgs e)
        {
            pointer4.Show();
            martLogo.Image = Properties.Resources.Safari_Ball_Display;
        }

        private void buySBButton_MouseLeave(object sender, EventArgs e)
        {
            pointer4.Hide();
            martLogo.Image = Properties.Resources.PokeMart_Icon;
        }

        private void buyMBButton_MouseHover(object sender, EventArgs e)
        {
            pointer5.Show();
            martLogo.Image = Properties.Resources.Master_Ball_Display;
        }

        private void buyMBButton_MouseLeave(object sender, EventArgs e)
        {
            pointer5.Hide();
            martLogo.Image = Properties.Resources.PokeMart_Icon;
        }
        private void label8_Click(object sender, EventArgs e)
        {
            string message = "Buy more balls if you run out, or buy a Mega Stone to Mega Evolve your Pokémon!" + Environment.NewLine;

            if (MegaStone > 0)
            {
                message += "You currently have " + MegaStone + " Mega Stone" + (MegaStone == 1 ? "" : "s");
            }

            MessageBox.Show(message, "Shop Help");
        }

        private void randomMaxHPButton_Click(object sender, EventArgs e)
        {

        }

        private void moneyBorder_Click(object sender, EventArgs e)
        {
            MessageBox.Show("You get money for every pokemon you catch.", "Money Help");
            MessageBox.Show("The lowest you can get is 1 Pokémon Dollar, and the highest is 3000!", "Limits");
        }

        private void itemsBox_Click(object sender, EventArgs e)
        {
            MessageBox.Show("All of the items available for purchase.", "Item Help");
        }

        private void label7_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Pokémon in the Personal Computer that are not able to fit in the team.", "PC Help");
        }

        private void buyGBButton_Click(object sender, EventArgs e)
        {
            const int greatBallCost = 600;

            if (money >= greatBallCost)
            {
                GB++;
                money -= greatBallCost;
                moneyLabel.Text = money.ToString();
            }
        }

        private void buyUBButton_Click(object sender, EventArgs e)
        {
            const int ultraBallCost = 1200;

            if (money >= ultraBallCost)
            {
                UB++;
                money -= ultraBallCost;
                moneyLabel.Text = money.ToString();
            }
        }

        private void buySBButton_Click(object sender, EventArgs e)
        {
            const int safariBallCost = 1700;

            if (money >= safariBallCost)
            {
                SB++;
                money -= safariBallCost;
                moneyLabel.Text = money.ToString();
            }
        }

        private void buyMBButton_Click(object sender, EventArgs e)
        {
            const int masterBallCost = 3400;

            if (money >= masterBallCost)
            {
                MB++;
                money -= masterBallCost;
                moneyLabel.Text = money.ToString();
            }
        }

        private void buyMegaStoneButton_Click(object sender, EventArgs e)
        {
            const int megaStoneCost = 10000;

            if (money >= megaStoneCost)
            {
                MegaStone++;
                money -= megaStoneCost;
                moneyLabel.Text = money.ToString();
            }
        }

        private void buyMegaStoneButton_MouseHover(object sender, EventArgs e)
        {
            pointer6.Show();
            martLogo.Image = Properties.Resources.Mega_Stone_Display;
        }

        private void buyMegaStoneButton_MouseLeave(object sender, EventArgs e)
        {
            pointer6.Hide();
            martLogo.Image = Properties.Resources.PokeMart_Icon;
        }

        private void megaEvolveButton_Click(object sender, EventArgs e)
        {
            if (pokemonTeamBox.SelectedItem != null)
            {
                string selectedPokemon = pokemonTeamBox.SelectedItem.ToString();
                if (!selectedPokemon.Contains("-Mega"))
                {
                    MegaStone--;
                    string megaEvolvedPokemon = selectedPokemon + "-Mega";
                    pokemonTeamBox.Items.Add(megaEvolvedPokemon);
                    pokemonTeamBox.Items.Remove(selectedPokemon);
                }
            }
        }


        private void deselectButton_Click(object sender, EventArgs e)
        {
            battleButton.Text = "Battle";
            pokemonBox.Enabled = true;
            pokemonTeamBox.SelectedIndex = -1;
            pcBox.SelectedIndex = -1;
            pokemonBox.Clear();
        }
  

        private void pokeBallBox_Click(object sender, EventArgs e)
        {
            if (pokeBallBox.Image == null) return; // Exit early if the image is not set

            string selectedPokemon = "";
            if (!string.IsNullOrEmpty(pokemonBox.Text))
            {
                selectedPokemon = pokemonBox.Text.ToUpper();
            }
            else if (pokemonTeamBox.SelectedIndex != -1)
            {
                selectedPokemon = pokemonTeamBox.SelectedItem.ToString();
            }
            else if (pcBox.SelectedIndex != -1)
            {
                selectedPokemon = pcBox.SelectedItem.ToString();
            }

            if (!string.IsNullOrEmpty(selectedPokemon))
            {
                MessageBox.Show(types + " type", selectedPokemon);
            }
        }

    private void pokemonBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Search_Click((object)sender, (EventArgs)e);
            }
        }

        private void resetButton_Click(object sender, EventArgs e)
        {
            DialogResult resetConfirmation = MessageBox.Show("Are you sure you want to restart the application? All progress will be lost.", "Quit", MessageBoxButtons.YesNo);
            if (resetConfirmation == DialogResult.Yes)
            {
                Application.Restart();
            }
        }

        private void randomPokemonButton_MouseDown(object sender, MouseEventArgs e)
        {
            pokemonBox.Text = pokemon[rnd.Next(pokemon.Count())].ToString();

        }

        private void randomBallButton_MouseDown(object sender, MouseEventArgs e)
        {
            string ballNo = balls[rnd.Next(0, 5)];

            switch (ballNo)
            {
                case "PokeBall":
                    if (PB > 0)
                        ballChosenBox.Text = ballNo;
                    break;
                case "Master Ball":
                    if (MB > 0)
                        ballChosenBox.Text = ballNo;
                    break;
                case "Great Ball":
                    if (GB > 0)
                        ballChosenBox.Text = ballNo;
                    break;
                case "Safari Ball":
                    if (SB > 0)
                        ballChosenBox.Text = ballNo;
                    break;
                case "Ultra Ball":
                    if (UB > 0)
                        ballChosenBox.Text = ballNo;
                    break;
            }
        }


        private void randomStatusButton_MouseDown(object sender, MouseEventArgs e)
        {
            string[] statusArray = { "PAR", "SLP", "BRN", "FRZ", "PSN", "" };

            int index = rnd.Next(statusArray.Length);
            pokStatusBox.Text = statusArray[index];
        }

        private void randomMaxHPButton_MouseDown(object sender, MouseEventArgs e)
        {
            pokMaxHPBox.Text = rnd.Next(1, 256).ToString();
        }

        private void randomCurrentHPButton_MouseDown(object sender, MouseEventArgs e)
        {
            int maxHP;
            if (int.TryParse(pokMaxHPBox.Text, out maxHP))
            {
                int currentHP = rnd.Next(1, maxHP + 1);
                pokCurrentHPBox.Text = currentHP.ToString();
            }
            else
            {
                pokCurrentHPBox.Text = rnd.Next(1, 256).ToString();
            }
        }

    }
}
